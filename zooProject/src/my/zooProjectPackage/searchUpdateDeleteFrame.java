
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * searchUpdateDeleteFrame.java
 *
 * Created on 11-Mar-2014, 23:29:20
 */

package my.zooProjectPackage;
import java.sql.*;
import javax.swing.JOptionPane;
import net.proteanit.sql.DbUtils;
import my.staffLibraryPackage.*;
import my.animalLibraryPackage.Animal;
import my.taxonomyClassLibrary.Taxonomy;
/**
 *
 * @author patrick
 */
public class searchUpdateDeleteFrame extends javax.swing.JFrame {

    private PreparedStatement prest;

    // These are Object declarations associated with each of the Projects Classes
    vet v = new vet();
    manager m = new manager();
    cleanerFeeder cf = new cleanerFeeder();
    Animal ani = new Animal();
    Taxonomy tax = new Taxonomy();
    staff s = new staff();


    /** Creates new form searchUpdateDeleteFrame */
    public searchUpdateDeleteFrame() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        searchResultsHeadingLabel = new javax.swing.JLabel();
        searchTableScrollPane = new javax.swing.JScrollPane();
        searchTable = new javax.swing.JTable();
        searchSectionPanel = new javax.swing.JPanel();
        searchByCriteriaLabel = new javax.swing.JLabel();
        orLabel = new javax.swing.JLabel();
        searchByIDLabel = new javax.swing.JLabel();
        chooseATableToQueryLabel = new javax.swing.JLabel();
        chooseTableComboBox = new javax.swing.JComboBox();
        searchByCriteriaText = new javax.swing.JTextField();
        searchByIDcriteriaText = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        updateTableButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        searchByTitleText = new javax.swing.JTextField();
        searchByTitleLabel = new javax.swing.JLabel();
        orLabel1 = new javax.swing.JLabel();
        backToMenuButton = new javax.swing.JButton();
        logOutButton = new javax.swing.JButton();
        usefulQueryComboBox = new javax.swing.JComboBox();
        usefulQueryLabel = new javax.swing.JLabel();
        getResultsButton = new javax.swing.JButton();
        backgroundImageLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Search, Update & Delete Frame");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(null);

        searchResultsHeadingLabel.setFont(new java.awt.Font("Tahoma", 1, 18));
        searchResultsHeadingLabel.setForeground(new java.awt.Color(51, 51, 255));
        searchResultsHeadingLabel.setText("                 Search Results");
        searchResultsHeadingLabel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(51, 153, 255), 5, true));
        searchResultsHeadingLabel.setOpaque(true);
        getContentPane().add(searchResultsHeadingLabel);
        searchResultsHeadingLabel.setBounds(540, 20, 310, 40);

        searchTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Column 1", "Column 2", "Column 3", "Column 4"
            }
        ));
        searchTable.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                searchTableFocusLost(evt);
            }
        });
        searchTableScrollPane.setViewportView(searchTable);

        getContentPane().add(searchTableScrollPane);
        searchTableScrollPane.setBounds(230, 80, 1010, 370);

        searchSectionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Search Section", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14), new java.awt.Color(102, 102, 255))); // NOI18N

        searchByCriteriaLabel.setText("Search By Staff Name");

        orLabel.setFont(new java.awt.Font("Tahoma", 1, 11));
        orLabel.setText("OR");

        searchByIDLabel.setText("Search By ID");

        chooseATableToQueryLabel.setText("Choose A Table To Query:");

        chooseTableComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Staff", "Animal", "Taxonomy" }));
        chooseTableComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chooseTableComboBoxItemStateChanged(evt);
            }
        });

        searchByCriteriaText.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchByCriteriaTextMouseClicked(evt);
            }
        });
        searchByCriteriaText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchByCriteriaTextActionPerformed(evt);
            }
        });

        searchByIDcriteriaText.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchByIDcriteriaTextMouseClicked(evt);
            }
        });
        searchByIDcriteriaText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchByIDcriteriaTextKeyReleased(evt);
            }
        });

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        updateTableButton.setText("Update");
        updateTableButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateTableButtonActionPerformed(evt);
            }
        });
        updateTableButton.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                updateTableButtonFocusLost(evt);
            }
        });

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        searchByTitleText.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchByTitleTextMouseClicked(evt);
            }
        });

        searchByTitleLabel.setText("Search By Title");

        orLabel1.setFont(new java.awt.Font("Tahoma", 1, 11));
        orLabel1.setText("OR");

        javax.swing.GroupLayout searchSectionPanelLayout = new javax.swing.GroupLayout(searchSectionPanel);
        searchSectionPanel.setLayout(searchSectionPanelLayout);
        searchSectionPanelLayout.setHorizontalGroup(
            searchSectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchSectionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(searchSectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(searchSectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(chooseTableComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(chooseATableToQueryLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(searchByIDLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(searchSectionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(searchByIDcriteriaText, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(123, Short.MAX_VALUE))
            .addGroup(searchSectionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(orLabel1)
                .addContainerGap(162, Short.MAX_VALUE))
            .addGroup(searchSectionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(orLabel)
                .addContainerGap(162, Short.MAX_VALUE))
            .addGroup(searchSectionPanelLayout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(searchSectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(searchButton)
                    .addGroup(searchSectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(updateTableButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(deleteButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(89, 89, 89))
            .addGroup(searchSectionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(searchSectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(searchSectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(searchByCriteriaText, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(searchByTitleText, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE)
                        .addComponent(searchByTitleLabel, javax.swing.GroupLayout.Alignment.LEADING))
                    .addComponent(searchByCriteriaLabel))
                .addContainerGap(53, Short.MAX_VALUE))
        );

        searchSectionPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {deleteButton, searchButton, updateTableButton});

        searchSectionPanelLayout.setVerticalGroup(
            searchSectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchSectionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chooseATableToQueryLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(chooseTableComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(searchByIDLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchByIDcriteriaText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(orLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(searchByTitleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(searchByTitleText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(orLabel)
                .addGap(18, 18, 18)
                .addComponent(searchByCriteriaLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchByCriteriaText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(searchButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(updateTableButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(deleteButton)
                .addContainerGap(37, Short.MAX_VALUE))
        );

        getContentPane().add(searchSectionPanel);
        searchSectionPanel.setBounds(20, 20, 200, 450);

        backToMenuButton.setText("Back to Menu");
        backToMenuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backToMenuButtonActionPerformed(evt);
            }
        });
        getContentPane().add(backToMenuButton);
        backToMenuButton.setBounds(50, 490, 120, 23);

        logOutButton.setText("Log Out");
        logOutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logOutButtonActionPerformed(evt);
            }
        });
        getContentPane().add(logOutButton);
        logOutButton.setBounds(60, 530, 90, 23);

        usefulQueryComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Please Select...", "List from Today's Feeding Log", "List of Animals that left the Zoo & the date they departed", "Count of Animals in Each Area", "Food Planner For Each Animal", "Last Animal Examined & by whom", "List of Animals with Concerning Worldwide Status", "Animals born in Dublin Zoo in the last 5 years", "Headcount for Each Manager", "List of Which Employees Report to which Managers", "Average weight of each Animal Species" }));
        getContentPane().add(usefulQueryComboBox);
        usefulQueryComboBox.setBounds(430, 520, 390, 20);

        usefulQueryLabel.setFont(new java.awt.Font("Tahoma", 1, 14));
        usefulQueryLabel.setForeground(new java.awt.Color(51, 51, 255));
        usefulQueryLabel.setText("   USEFUL QUERIES");
        usefulQueryLabel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(102, 153, 255), 4, true));
        usefulQueryLabel.setOpaque(true);
        getContentPane().add(usefulQueryLabel);
        usefulQueryLabel.setBounds(550, 477, 160, 30);

        getResultsButton.setText("Get Results");
        getResultsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getResultsButtonActionPerformed(evt);
            }
        });
        getContentPane().add(getResultsButton);
        getResultsButton.setBounds(570, 560, 110, 23);

        backgroundImageLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/Grass_back(resized&edited).jpg"))); // NOI18N
        getContentPane().add(backgroundImageLabel);
        backgroundImageLabel.setBounds(0, 0, 1250, 640);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-1270)/2, (screenSize.height-677)/2, 1270, 677);
    }// </editor-fold>//GEN-END:initComponents

    


    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        // This part deals with the Variables associated with the Database Connection
        String url = "jdbc:mysql://127.0.0.1:3306/";
        String dbName = "zooProject";
        String driver = "com.mysql.jdbc.Driver";
        String userName = "root";
        String password = "nss2013";


        // This condition deals with the Staff table and executes all within the parameters.
        // This process is repeated for each Table, Staff, Animal & Taxonomy.
        if(chooseTableComboBox.getSelectedItem().equals("Staff"))
        {
        // This parts tries to execute the SQL statement and if it can't relays a message
        // The first section is connecting the various variables to the statement to be exectuted
        try {
            Class.forName(driver).newInstance();
            Connection conn = DriverManager.getConnection(url + dbName, userName, password);
            System.out.println("Database Connection Successful");


                // Set Up SQL Statement 1
                String sql1= "SELECT STAFF_ID AS ID, FIRST_NAME AS First, LAST_NAME AS Surname, TITLE AS Title, " +
                        "REPORTS_TO AS 'Reports To', JOB_DESC AS 'Job Desc' FROM STAFF WHERE STAFF_ID = ?";

                // Set Up SQL Statement 2
                String sql2 = "SELECT STAFF_ID AS ID, FIRST_NAME AS First, LAST_NAME AS Surname, TITLE AS Title, " +
                         "REPORTS_TO AS 'Reports To', JOB_DESC AS 'Job Desc' FROM STAFF WHERE FIRST_NAME LIKE ?";

                // Set Up SQL Statement 3
                String sql3 = "SELECT STAFF_ID AS ID, FIRST_NAME AS First, LAST_NAME AS Surname, TITLE AS Title, " +
                         "REPORTS_TO AS 'Reports To', JOB_DESC AS 'Job Desc' FROM STAFF WHERE TITLE LIKE ?";


                // Each textfield becomes editable when clicked, so the below deals with executed specific tasks
                // if one textbox is enabled or another.
                if (searchByIDcriteriaText.isEditable())
                {
                    s.setNewStaffID(Integer.parseInt(searchByIDcriteriaText.getText()));
                    prest = conn.prepareStatement(sql1);
                    prest.setInt(1, s.getNewStaffID());

                    ResultSet rs1 = prest.executeQuery();
                    searchTable.setModel(DbUtils.resultSetToTableModel(rs1));
                }
                else if (searchByCriteriaText.isEditable())
                {
                    s.setFirstName(searchByCriteriaText.getText());
                    prest = conn.prepareStatement(sql2);
                    prest.setString(1, "%" + s.getFirstName() + "%");

                    ResultSet rs2 = prest.executeQuery();
                    searchTable.setModel(DbUtils.resultSetToTableModel(rs2));
                }
                else if (searchByTitleText.isEditable())
                {
                    s.setTitle(searchByTitleText.getText());
                    prest = conn.prepareStatement(sql3);
                    prest.setString(1, "%" + s.getTitle() + "%");

                    ResultSet rs3 = prest.executeQuery();
                    searchTable.setModel(DbUtils.resultSetToTableModel(rs3));
                }
                else
                {
                    System.exit(0);
                }

                // Closes the connection
                conn.close();

            // Catches the error and displays a message
            } catch (Exception e) {
                e.printStackTrace();
            }
        } 
        else if (chooseTableComboBox.getSelectedItem().equals("Taxonomy"))
        {
            try
            {
                Class.forName(driver).newInstance();
                Connection conn = DriverManager.getConnection(url + dbName, userName, password);
                System.out.println("Database Connection Successful");

                String sql1 = "SELECT * FROM TAXONOMY WHERE TAXON_CODE = ?";
                String sql2 = "SELECT * FROM TAXONOMY WHERE CLASS LIKE ?";
                String sql3 = "SELECT * FROM TAXONOMY WHERE FAMILY LIKE ?";


                if (searchByIDcriteriaText.isEditable())
                {
                    tax.setTaxonCode(Integer.parseInt(searchByIDcriteriaText.getText()));
                    prest = conn.prepareStatement(sql1);                  
                    prest.setInt(1, tax.getTaxonCode());
                    ResultSet rs1 = prest.executeQuery();
                    searchTable.setModel(DbUtils.resultSetToTableModel(rs1));
                }
                else if (searchByCriteriaText.isEditable())
                {
                    tax.setClassName(searchByCriteriaText.getText());
                    prest = conn.prepareStatement(sql2);
                    prest.setString(1, "%" + tax.getClassName() + "%");
                    ResultSet rs2 = prest.executeQuery();
                    searchTable.setModel(DbUtils.resultSetToTableModel(rs2));
                }
                else if (searchByTitleText.isEditable())
                {
                    tax.setFamily(searchByTitleText.getText());
                    prest = conn.prepareStatement(sql3);
                    prest.setString(1, "%" + tax.getFamily() + "%");
                    ResultSet rs3 = prest.executeQuery();
                    searchTable.setModel(DbUtils.resultSetToTableModel(rs3));
                }
                else
                {
                    System.exit(0);
                }

                prest.close();
                conn.close();
            }
            catch (Exception e)
            {
                e.printStackTrace();
            }

        }
        else if(chooseTableComboBox.getSelectedItem().equals("Animal"))
        {
            try {
            Class.forName(driver).newInstance();
            Connection conn = DriverManager.getConnection(url + dbName, userName, password);
            System.out.println("Database Connection Successful");


                String sql1= "SELECT ANIMAL_ID AS ID, COMMON_NAME AS Name, NICKNAME AS Nickname, GENDER AS Sex, " +
                             "AGE AS Age, BIRTHDATE as Birthdate, BIRTH_LOCATION AS 'Born In', COUNTRY_OF_ORIGIN AS 'Originated In', " +
                             "WEIGHT_KG AS Weight, HEIGHT_FT AS Height, LENGTH_FT AS Length, IUCN_CODE AS IUCN, TAXON_CODE AS Taxon, HABITAT_ID AS HabId " +
                             "FROM ANIMAL WHERE ANIMAL_ID = ?";

                String sql2 = "SELECT ANIMAL_ID AS ID, COMMON_NAME AS Name, NICKNAME AS Nickname, GENDER AS Sex, " +
                              "AGE AS Age, BIRTHDATE as Birthdate, BIRTH_LOCATION AS 'Born In', COUNTRY_OF_ORIGIN AS 'Originated In', " +
                              "WEIGHT_KG AS Weight, HEIGHT_FT AS Height, LENGTH_FT AS Length, IUCN_CODE AS IUCN, TAXON_CODE AS Taxon, HABITAT_ID AS HabId " +
                              "FROM ANIMAL WHERE COMMON_NAME LIKE ?";


                String sql3 = "SELECT ANIMAL_ID AS ID, COMMON_NAME AS Name, NICKNAME AS Nickname, GENDER AS Sex, " +
                              "AGE AS Age, BIRTHDATE as Birthdate, BIRTH_LOCATION AS 'Born In', COUNTRY_OF_ORIGIN AS 'Originated In', " +
                              "WEIGHT_KG AS Weight, HEIGHT_FT AS Height, LENGTH_FT AS Length, IUCN_CODE AS IUCN, TAXON_CODE AS Taxon, HABITAT_ID AS HabId " +
                              "FROM ANIMAL WHERE BIRTH_LOCATION LIKE ?";


                if (searchByIDcriteriaText.isEditable())
                {
                    ani.setAnimalID(Integer.parseInt(searchByIDcriteriaText.getText()));
                    prest = conn.prepareStatement(sql1);
                    prest.setInt(1, ani.getAnimalID());
                    ResultSet rs1 = prest.executeQuery();
                    searchTable.setModel(DbUtils.resultSetToTableModel(rs1));
                }
                else if (searchByCriteriaText.isEditable())
                {
                    ani.setCommonName(searchByCriteriaText.getText());
                    prest = conn.prepareStatement(sql2);
                    prest.setString(1, "%" + ani.getCommonName() + "%");
                    ResultSet rs2 = prest.executeQuery();
                    searchTable.setModel(DbUtils.resultSetToTableModel(rs2));
                }
                else if (searchByTitleText.isEditable())
                {
                    ani.setBirthLocation(searchByTitleText.getText());
                    prest = conn.prepareStatement(sql3);
                    prest.setString(1, "%" + ani.getBirthLocation() + "%");
                    ResultSet rs3 = prest.executeQuery();
                    searchTable.setModel(DbUtils.resultSetToTableModel(rs3));
                }
                else
                {
                    System.exit(0);
                }

                conn.close();
                prest.close();
                
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

    }//GEN-LAST:event_searchButtonActionPerformed

    private void searchByIDcriteriaTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchByIDcriteriaTextKeyReleased

    }//GEN-LAST:event_searchByIDcriteriaTextKeyReleased

    private void searchByIDcriteriaTextMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchByIDcriteriaTextMouseClicked
        // This Method deals with enabling & disabling variouse textfields when clicked
        searchByCriteriaText.setEditable(false);
        searchByTitleText.setEditable(false);
        searchByCriteriaText.setText("");
        searchByIDcriteriaText.setEditable(true);
        updateTableButton.setEnabled(true);
        deleteButton.setEnabled(true);

    }//GEN-LAST:event_searchByIDcriteriaTextMouseClicked

    private void searchByCriteriaTextMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchByCriteriaTextMouseClicked
        // This Method deals with enabling & disabling variouse textfields when clicked
        searchByIDcriteriaText.setEditable(false);
        searchByIDcriteriaText.setText("");
        searchByTitleText.setEditable(false);
        searchByTitleText.setText("");
        searchByCriteriaText.setEditable(true);
        updateTableButton.setEnabled(false);
        deleteButton.setEnabled(false);
    }//GEN-LAST:event_searchByCriteriaTextMouseClicked

    private void chooseTableComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chooseTableComboBoxItemStateChanged
        // This Method deals with changing labels over textboxesm when different tables are selected from the dropdown list. 
        searchByIDcriteriaText.setText("");
        searchByTitleText.setText("");
        searchByCriteriaText.setText("");
        
        if(chooseTableComboBox.getSelectedItem().equals("Taxonomy"))
        {
            searchByCriteriaLabel.setText("Search By Class Name");
            searchByTitleLabel.setText("Search By Family Name"); 
        }
        else if(chooseTableComboBox.getSelectedItem().equals("Staff"))
        {
            searchByCriteriaLabel.setText("Search By Staff Name");
            searchByTitleLabel.setText("Search By Title");
        }
        else if(chooseTableComboBox.getSelectedItem().equals("Animal"))
        {
            searchByCriteriaLabel.setText("Search By Animal Name");
            searchByTitleLabel.setText("Search By Where Born");
        }
    }//GEN-LAST:event_chooseTableComboBoxItemStateChanged

    private void updateTableButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateTableButtonActionPerformed
        // This part deals with the Variables associated with the Database Connection
        String url = "jdbc:mysql://127.0.0.1:3306/";
        String dbName = "zooProject";
        String driver = "com.mysql.jdbc.Driver";
        String userName = "root";
        String password = "nss2013";

        // This part executes whatever name is highlighted in the ComboBox
        if(chooseTableComboBox.getSelectedItem().equals("Staff"))
        {
        try {
            Class.forName(driver).newInstance();
            Connection conn = DriverManager.getConnection(url + dbName, userName, password);
            System.out.println("Database Connection Successful");

            // Set Up SQL Update Statement
            String sql = "UPDATE STAFF SET FIRST_NAME = ?, LAST_NAME = ?, TITLE = ?, REPORTS_TO = ?, JOB_DESC = ? " +
                         "WHERE STAFF_ID = ?";

             // Deals from Vet Job Title first
             if(searchTable.getValueAt(0, 3).toString().equals("Vet"))
             {
                v.setFirstName(searchTable.getValueAt(0, 1).toString());
                v.setLastName(searchTable.getValueAt(0, 2).toString());
                v.setTitle(searchTable.getValueAt(0, 3).toString());

                try
                {
                    v.setReportsToID(Integer.parseInt(searchTable.getValueAt(0, 4).toString()));
                }
                catch(Exception e)
                {
                    v.setReportsToID(0);
                    e.printStackTrace();
                }

                try
                {
                    v.setJobDescription(searchTable.getValueAt(0, 5).toString());
                }
                catch(Exception e)
                {
                    v.setJobDescription("");  
                    e.printStackTrace();
                }
                v.setNewStaffID(Integer.parseInt(searchByIDcriteriaText.getText().toString()));

                prest = conn.prepareStatement(sql);
                prest.setString(1, v.getFirstName());
                prest.setString(2, v.getLastName());
                prest.setString(3, v.getTitle());
                
                if(searchTable.getValueAt(0, 4) == null)
                {
                    prest.setNull(4, java.sql.Types.INTEGER);
                }
                else if (searchTable.getValueAt(0, 4).equals(""))
                {
                    prest.setNull(4,java.sql.Types.INTEGER);
                }
                else
                {
                    prest.setInt(4, v.getReportsToID());
                }


                if(searchTable.getValueAt(0, 5) == null)
                {
                    prest.setNull(5, java.sql.Types.VARCHAR);
                }
                else if (searchTable.getValueAt(0, 5).equals(""))
                {
                    prest.setNull(5,java.sql.Types.VARCHAR);
                }
                else
                {
                    prest.setString(5, v.getJobDescription());
                }
                prest.setInt(6, v.getNewStaffID());
                prest.executeUpdate();
                JOptionPane.showMessageDialog(null, "Record has been successfully updated");

             }
            // Cleaner feeder staff member next. 
             else if(searchTable.getValueAt(0, 3).toString().equals("CleanerFeeder"))
             {
                cf.setFirstName(searchTable.getValueAt(0, 1).toString());
                cf.setLastName(searchTable.getValueAt(0, 2).toString());
                cf.setTitle(searchTable.getValueAt(0, 3).toString());
                
                try
                {
                    cf.setReportsToID(Integer.parseInt(searchTable.getValueAt(0, 4).toString()));
                }
                catch(Exception e)
                {
                    cf.setReportsToID(0);
                    e.printStackTrace();
                }

                try
                {
                    cf.setJobDescription(searchTable.getValueAt(0, 5).toString());
                }
                catch(Exception e)
                {
                    cf.setJobDescription("");
                    e.printStackTrace();
                }
                cf.setNewStaffID(Integer.parseInt(searchByIDcriteriaText.getText().toString()));
                

                prest = conn.prepareStatement(sql);
                prest.setString(1, cf.getFirstName());
                prest.setString(2, cf.getLastName());
                prest.setString(3, cf.getTitle());

                if(searchTable.getValueAt(0, 4) == null)
                {
                    prest.setNull(4,java.sql.Types.INTEGER);
                }
                else if (searchTable.getValueAt(0, 4).equals(""))
                {
                    prest.setNull(4, java.sql.Types.INTEGER);
                }
                else
                {
                    prest.setInt(4, cf.getReportsToID());
                }

                if(searchTable.getValueAt(0, 5) == null)
                {
                    prest.setNull(5,java.sql.Types.VARCHAR);
                }
                else if (searchTable.getValueAt(0, 5).equals(""))
                {
                    prest.setNull(5,java.sql.Types.VARCHAR);
                }
                else
                {
                    prest.setString(5, cf.getJobDescription());
                }
                prest.setInt(6, cf.getNewStaffID());
                
                prest.executeUpdate();
                JOptionPane.showMessageDialog(null, "Record has been successfully updated");

             }
             // Now executes whatever is within the comboBox
             else if(searchTable.getValueAt(0, 3).toString().equals("Manager"))
             {
                m.setFirstName(searchTable.getValueAt(0, 1).toString());
                m.setLastName(searchTable.getValueAt(0, 2).toString());
                m.setTitle(searchTable.getValueAt(0, 3).toString());
                
                try
                {
                    m.setReportsToID(Integer.parseInt(searchTable.getValueAt(0, 4).toString()));
                }
                catch(Exception e)
                {
                    m.setReportsToID(0);
                    e.printStackTrace();
                }

                try
                {
                    m.setJobDescription(searchTable.getValueAt(0, 5).toString());
                }
                catch(Exception e)
                {
                    m.setJobDescription("");
                    e.printStackTrace();
                }
                m.setNewStaffID(Integer.parseInt(searchByIDcriteriaText.getText().toString()));
                

                prest = conn.prepareStatement(sql);
                prest.setString(1, m.getFirstName());
                prest.setString(2, m.getLastName());
                prest.setString(3, m.getTitle());

                if(searchTable.getValueAt(0, 4) == null)
                {
                    prest.setNull(4,java.sql.Types.INTEGER);
                }
                else if (searchTable.getValueAt(0, 4).equals(""))
                {
                    prest.setNull(4,java.sql.Types.INTEGER);
                }
                else
                {
                    prest.setObject(4, m.getReportsToID());
                }

                if(searchTable.getValueAt(0, 5) == null)
                {
                    prest.setNull(5,java.sql.Types.VARCHAR);
                }
                else if (searchTable.getValueAt(0, 5).equals(""))
                {
                    prest.setNull(5,java.sql.Types.VARCHAR);

                }
                else{
                     prest.setString(5, m.getJobDescription());
                }
                prest.setInt(6, m.getNewStaffID());

                prest.executeUpdate();
                JOptionPane.showMessageDialog(null, "Record has been successfully updated");
                
                // Close the connection to the database
                conn.close();
                prest.close();
           
             }
          // Returns any errors and dumbs them out on screen
        } catch (Exception e) {
            e.printStackTrace();
        }
        }
        // Now deals with anything within the Animal Table.
        else if (chooseTableComboBox.getSelectedItem().equals("Animal"))
        {
            try {
                Class.forName(driver).newInstance();
                Connection conn = DriverManager.getConnection(url + dbName, userName, password);
                System.out.println("Database Connection Successful");

                // The SQL statement to execute.
                String sql = "UPDATE ANIMAL SET COMMON_NAME = ?, NICKNAME = ?, GENDER = ?, AGE = ?, BIRTHDATE = ?, BIRTH_LOCATION = ?, " +
                             "COUNTRY_OF_ORIGIN = ?, WEIGHT_KG = ?, HEIGHT_FT = ?, LENGTH_FT = ?, IUCN_CODE = ?, TAXON_CODE = ?, HABITAT_ID = ? " +
                             "WHERE ANIMAL_ID = ?";

                // Getters & setters object association.
                ani.setCommonName(searchTable.getValueAt(0, 1).toString());
                ani.setNickName(searchTable.getValueAt(0, 2).toString());
                ani.setGender(searchTable.getValueAt(0, 3).toString());
                ani.setAge(Integer.parseInt(searchTable.getValueAt(0, 4).toString()));
                ani.setBirthdate(searchTable.getValueAt(0, 5).toString());
                ani.setBirthLocation(searchTable.getValueAt(0, 6).toString());
                ani.setCountryOfOrigin(searchTable.getValueAt(0, 7).toString());
                ani.setWeight(Double.parseDouble(searchTable.getValueAt(0, 8).toString()));
                ani.setHeight(Double.parseDouble(searchTable.getValueAt(0, 9).toString()));
                ani.setLength(Double.parseDouble(searchTable.getValueAt(0, 10).toString()));
                ani.setIUCNCode(Integer.parseInt(searchTable.getValueAt(0, 11).toString()));
                ani.setTaxonomyID(Integer.parseInt(searchTable.getValueAt(0, 12).toString()));
                ani.setZooHabitatID(Integer.parseInt(searchTable.getValueAt(0, 13).toString()));
                ani.setAnimalID(Integer.parseInt(searchByIDcriteriaText.getText().toString()));

                prest = conn.prepareStatement(sql);
                prest.setString(1, ani.getCommonName());
                prest.setString(2, ani.getNickName());
                prest.setString(3, ani.getGender());
                prest.setInt(4, ani.getAge());
                prest.setString(5, ani.getBirthdate());
                prest.setString(6, ani.getBirthLocation());
                prest.setString(7, ani.getCountryOfOrigin());

                if(searchTable.getValueAt(0, 8) == null)
                {
                     prest.setNull(8 ,java.sql.Types.DOUBLE);
                }
                else
                {
                    prest.setDouble(8, ani.getWeight());
                }

                if(searchTable.getValueAt(0, 9) == null)
                {
                    prest.setNull(9 ,java.sql.Types.DOUBLE);
                }
                else
                {
                    prest.setDouble(9, ani.getHeight());
                }

                if(searchTable.getValueAt(0, 10) == null)
                {
                    prest.setNull(10 ,java.sql.Types.DOUBLE);
                }
                else
                {
                    prest.setDouble(10, ani.getLength());
                }
                prest.setInt(11, ani.getIUCNCode());
                prest.setInt(12, ani.getTaxonomyID());
                prest.setInt(13, ani.getZooHabitatID());
                prest.setInt(14, ani.getAnimalID());
                
                prest.executeUpdate();
                JOptionPane.showMessageDialog(null, "Record Successfully Updated");
                
                prest.close();
                conn.close();
            }
            catch(Exception e){
                e.printStackTrace();
            }

        }
        // Now deals with the Taxonomy Table.
        else if (chooseTableComboBox.getSelectedItem().equals("Taxonomy"))
        {
            try {
                Class.forName(driver).newInstance();
                Connection conn = DriverManager.getConnection(url + dbName, userName, password);
                System.out.println("Database Connection Successful");

                String sql = "UPDATE TAXONOMY SET SPECIES = ?, FAMILY = ?, ORDERING = ?, CLASS = ?, PHYLUM = ?, KINGDOM = ? " +
                             "WHERE TAXON_CODE = ?";

                tax.setSpecies(searchTable.getValueAt(0, 1).toString());
                tax.setFamily(searchTable.getValueAt(0, 2).toString());
                tax.setOrdering(searchTable.getValueAt(0, 3).toString());
                tax.setClassName(searchTable.getValueAt(0, 4).toString());
                tax.setPhylum(searchTable.getValueAt(0, 5).toString());
                tax.setKingdom(searchTable.getValueAt(0, 6).toString());
                tax.setTaxonCode(Integer.parseInt(searchByIDcriteriaText.getText().toString()));

                prest = conn.prepareStatement(sql);
                prest.setString(1, tax.getSpecies());
                prest.setString(2, tax.getFamily());
                prest.setString(3, tax.getOrdering());
                prest.setString(4, tax.getClassName());
                prest.setString(5, tax.getPhylum());
                prest.setString(6, tax.getKingdom());
                prest.setInt(7, tax.getTaxonCode());

                prest.executeUpdate();
                JOptionPane.showMessageDialog(null, "Record Successfully Updated");

                prest.close();
                conn.close();

            }catch(Exception e){
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_updateTableButtonActionPerformed

    private void searchByCriteriaTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchByCriteriaTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchByCriteriaTextActionPerformed

    private void backToMenuButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backToMenuButtonActionPerformed
        // Returns the User to the appropriate frame depending on what is mentioned in the Header Label
        if(searchResultsHeadingLabel.getText().equals("   CleanerFeeder Search Results"))
        {
            cleanerFeederOptionsFrame frame = new cleanerFeederOptionsFrame();
            frame.setVisible(true);
            setVisible(false);
        }
        else if(searchResultsHeadingLabel.getText().equals("        Manager Search Results"))
        {
            managersOptionsFrame frame =  new managersOptionsFrame();
            frame.setVisible(true);
            setVisible(false);
        }
        else
        {
            vetOptionsFrame frame = new vetOptionsFrame();
            frame.setVisible(true);
            setVisible(false);
        }
    }//GEN-LAST:event_backToMenuButtonActionPerformed

    private void logOutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logOutButtonActionPerformed
        // When this button is clicked a New Frame Object called Frame is created & the User
        // is returned to the Main login Frame.
        loginFrame frame = new loginFrame();
        frame.setVisible(true);
        setVisible(false);
    }//GEN-LAST:event_logOutButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
    // This part deals with the Variables associated with the Database Connection
    String url = "jdbc:mysql://127.0.0.1:3306/";
    String dbName = "zooProject";
    String driver = "com.mysql.jdbc.Driver";
    String userName = "root";
    String password = "nss2013";

    // The below deals with deletion of records from the database.
    // This only works when there is one row selected, the usual connection information applies here also and works for each table
    // and each Title for Staff within the more complex conditional statements.
    // If there are any issues, the try / catch system will dump the details out on screen.
    if(chooseTableComboBox.getSelectedItem().equals("Staff"))
    {
        if(searchTable.getValueAt(0, 3).toString().equals("Manager"))
        {
            try {
                Class.forName(driver).newInstance();
                Connection conn = DriverManager.getConnection(url + dbName, userName, password);
                System.out.println("Database Connection Successful");

                String sql = "DELETE FROM STAFF WHERE STAFF_ID = ?";

                m.setNewStaffID(Integer.parseInt(searchTable.getValueAt(0, 0).toString()));

                prest = conn.prepareStatement(sql);
                prest.setInt(1, m.getNewStaffID());
                prest.executeUpdate();
                JOptionPane.showMessageDialog(null, "Record has been successfully deleted");

                prest.close();
                conn.close();

            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        else if(searchTable.getValueAt(0, 3).toString().equals("Vet"))
        {
            try {
                Class.forName(driver).newInstance();
                Connection conn = DriverManager.getConnection(url + dbName, userName, password);
                System.out.println("Database Connection Successful");

                String sql = "DELETE FROM STAFF WHERE STAFF_ID = ?";

                v.setNewStaffID(Integer.parseInt(searchTable.getValueAt(0, 0).toString()));

                prest = conn.prepareStatement(sql);
                prest.setInt(1, v.getNewStaffID());
                prest.executeUpdate();
                JOptionPane.showMessageDialog(null, "Record for " + v.getFirstName() + v.getLastName() + " has been successfully deleted");

                prest.close();
                conn.close();

            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        else
        {
            try {
                Class.forName(driver).newInstance();
                Connection conn = DriverManager.getConnection(url + dbName, userName, password);
                System.out.println("Database Connection Successful");

                String sql = "DELETE FROM STAFF WHERE STAFF_ID = ?";

                cf.setNewStaffID(Integer.parseInt(searchTable.getValueAt(0, 0).toString()));

                prest = conn.prepareStatement(sql);
                prest.setInt(1, cf.getNewStaffID());
                prest.executeUpdate();
                JOptionPane.showMessageDialog(null, "Record for " + cf.getFirstName() + cf.getLastName() + " has been successfully deleted");

                prest.close();
                conn.close();

            } catch (Exception e) {
                e.printStackTrace();
            }
        }

    }
    else if(chooseTableComboBox.getSelectedItem().equals("Animal"))
    {
            try {
                Class.forName(driver).newInstance();
                Connection conn = DriverManager.getConnection(url + dbName, userName, password);
                System.out.println("Database Connection Successful");

                String sql = "DELETE FROM ANIMAL WHERE ANIMAL_ID = ?";

                ani.setAnimalID(Integer.parseInt(searchTable.getValueAt(0, 0).toString()));

                prest = conn.prepareStatement(sql);
                prest.setInt(1, ani.getAnimalID());
                prest.executeUpdate();
                JOptionPane.showMessageDialog(null, "Record has been successfully deleted");

                prest.close();
                conn.close();

            } catch (Exception e) {
                e.printStackTrace();
            }
    }
    else if(chooseTableComboBox.getSelectedItem().equals("Taxonomy"))
    {
            try {
                Class.forName(driver).newInstance();
                Connection conn = DriverManager.getConnection(url + dbName, userName, password);
                System.out.println("Database Connection Successful");

                String sql = "DELETE FROM TAXONOMY WHERE TAXON_CODE = ?";

                tax.setTaxonCode(Integer.parseInt(searchTable.getValueAt(0, 0).toString()));

                prest = conn.prepareStatement(sql);
                prest.setInt(1, tax.getTaxonCode());

                prest.executeUpdate();
                JOptionPane.showMessageDialog(null, "Record has been successfully deleted");

                prest.close();
                conn.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
    }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // Sets various fields to not-editable
        searchByCriteriaText.setEditable(false);
        searchByTitleText.setEditable(false); 
    }//GEN-LAST:event_formWindowOpened

    private void updateTableButtonFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_updateTableButtonFocusLost

    }//GEN-LAST:event_updateTableButtonFocusLost

    private void searchTableFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_searchTableFocusLost


        

    }//GEN-LAST:event_searchTableFocusLost

    private void getResultsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getResultsButtonActionPerformed
        
        // This part deals with the Variables associated with the Database Connection
        String url = "jdbc:mysql://127.0.0.1:3306/";
        String dbName = "zooProject";
        String driver = "com.mysql.jdbc.Driver";
        String userName = "root";
        String password = "nss2013";

        /* The below is the code for the list of useful queries,
         * each individual sql statement will execute depending on what data is visible inside the dropdown box.
         * a try and catch will display any issues.
         */
        if(usefulQueryComboBox.getSelectedItem().equals("Please Select..."))
        {
            JOptionPane.showMessageDialog(null, "Please Make a Selection");
        }
        else
        {
            if (usefulQueryComboBox.getSelectedItem().equals("List from Today's Feeding Log"))
            {
                try {
                    Class.forName(driver).newInstance();
                    Connection conn = DriverManager.getConnection(url + dbName, userName, password);
                    System.out.println("Database Connection Successful");


                    String sql= "SELECT 'Employee', S.FIRST_NAME, S.LAST_NAME, 'Fed Animal', A.COMMON_NAME, A.NICKNAME, 'On', FL.DATETIME_FED, FL.NOTES " +
                                "FROM STAFF AS S " +
                                "INNER JOIN FEEDING_LOG AS FL " +
                                "ON S.STAFF_ID = FL.STAFF_ID " +
                                "INNER JOIN ANIMAL AS A " +
                                "ON FL.ANIMAL_ID = A.ANIMAL_ID " +
                                "WHERE DATE_SUB(CURDATE(),INTERVAL 1 DAY) <= DATETIME_FED " +
                                "ORDER BY DATETIME_FED DESC";


                    prest = conn.prepareStatement(sql);
                    ResultSet rs = prest.executeQuery();
                    searchTable.setModel(DbUtils.resultSetToTableModel(rs));

                    conn.close();
                }
                catch (Exception e)
                {
                    e.printStackTrace();
                }

            }
            else if(usefulQueryComboBox.getSelectedItem().equals("List of Animals that left the Zoo & the date they departed"))
            {
                     try {
                    Class.forName(driver).newInstance();
                    Connection conn = DriverManager.getConnection(url + dbName, userName, password);
                    System.out.println("Database Connection Successful");


                    String sql= "SELECT COMMON_NAME, NICKNAME, DATE_DEPARTED, DEPARTED_TO " +
                                "FROM ANIMAL_LOC_HIST_TIMELINE_VIEW " +
                                "WHERE DATE_DEPARTED IS NOT NULL";


                    prest = conn.prepareStatement(sql);
                    ResultSet rs = prest.executeQuery();
                    searchTable.setModel(DbUtils.resultSetToTableModel(rs));

                    conn.close();
                }
                catch (Exception e)
                {
                    e.printStackTrace();
                }
            }
            else if(usefulQueryComboBox.getSelectedItem().equals("Count of Animals in Each Area"))
            {
                     try {
                    Class.forName(driver).newInstance();
                    Connection conn = DriverManager.getConnection(url + dbName, userName, password);
                    System.out.println("Database Connection Successful");


                    String sql= "SELECT 'The Habitat ', ZOO_HAB AS Habitat, 'Contains ', COUNT(ANIMAL_ID) AS 'Animal Count', 'Animals' " +
                                "FROM ANIMAL AS A " +
                                "INNER JOIN ZOO_HABITAT AS ZH " +
                                "ON A.HABITAT_ID = ZH.HABITAT_ID " +
                                "INNER JOIN TAXONOMY AS T " +
                                "ON A.TAXON_CODE = T.TAXON_CODE " +
                                "INNER JOIN IUCN_STATUS AS I " +
                                "ON A.IUCN_CODE = I.IUCN_CODE " +
                                "GROUP BY ZOO_HAB " +
                                "ORDER BY COUNT(ANIMAL_ID) DESC";

                    prest = conn.prepareStatement(sql);
                    ResultSet rs = prest.executeQuery();
                    searchTable.setModel(DbUtils.resultSetToTableModel(rs));

                    conn.close();
                }
                catch (Exception e)
                {
                    e.printStackTrace();
                }
            }
            else if(usefulQueryComboBox.getSelectedItem().equals("Food Planner For Each Animal"))
            {
                     try {
                    Class.forName(driver).newInstance();
                    Connection conn = DriverManager.getConnection(url + dbName, userName, password);
                    System.out.println("Database Connection Successful");


                    String sql= "SELECT 'Animal', A.COMMON_NAME, 'Nickname', A.NICKNAME, 'Eats', " +
                                "COUNT(AF.DAILY_FEEDS) AS 'Daily Feeds', 'Of', FT.FOOD_TYPE, 'Daily' " +
                                "FROM ANIMAL AS A " +
                                "INNER JOIN ANIMAL_FOOD AS AF " +
                                "ON A.ANIMAL_ID = AF.ANIMAL_ID " +
                                "INNER JOIN FOOD_TABLE AS FT " +
                                "ON AF.FOOD_ID = FT.FOOD_ID " +
                                "GROUP BY FT.FOOD_TYPE " +
                                "ORDER BY A.COMMON_NAME";


                    prest = conn.prepareStatement(sql);
                    ResultSet rs = prest.executeQuery();
                    searchTable.setModel(DbUtils.resultSetToTableModel(rs));

                    conn.close();
                }
                catch (Exception e)
                {
                    e.printStackTrace();
                }
            }
            else if(usefulQueryComboBox.getSelectedItem().equals("Last Animal Examined & by whom"))
            {
                     try {
                    Class.forName(driver).newInstance();
                    Connection conn = DriverManager.getConnection(url + dbName, userName, password);
                    System.out.println("Database Connection Successful");


                    String sql= "SELECT 'Vet', S.FIRST_NAME, S.LAST_NAME, 'Examined', A.ANIMAL_ID, A.COMMON_NAME, A.NICKNAME, " +
                                " 'On', AH.DATETIME_EXAMINED, AH.NOTES " +
                                "FROM STAFF AS S " +
                                "INNER JOIN ANIMAL_HEALTH AS AH " +
                                "ON S.STAFF_ID = AH.STAFF_ID " +
                                "INNER JOIN ANIMAL AS A " +
                                "ON A.ANIMAL_ID = AH.SPECIES_EXAMINED " +
                                "WHERE AH.DATETIME_EXAMINED = " +
                                "(SELECT MAX(DATETIME_EXAMINED) FROM ANIMAL_HEALTH)";


                    prest = conn.prepareStatement(sql);
                    ResultSet rs = prest.executeQuery();
                    searchTable.setModel(DbUtils.resultSetToTableModel(rs));

                    conn.close();
                }
                catch (Exception e)
                {
                    e.printStackTrace();
                }
            }
            else if(usefulQueryComboBox.getSelectedItem().equals("List of Animals with Concerning Worldwide Status"))
            {
                     try {
                    Class.forName(driver).newInstance();
                    Connection conn = DriverManager.getConnection(url + dbName, userName, password);
                    System.out.println("Database Connection Successful");


                    String sql= "SELECT COMMON_NAME, NICKNAME, STATUS " +
                                "FROM ANIMAL AS A " +
                                "INNER JOIN IUCN_STATUS AS I " +
                                "ON A.IUCN_CODE = I.IUCN_CODE " +
                                "WHERE STATUS IN ('Critically Endangered', 'Endangered', 'Extinct In Wild')";


                    prest = conn.prepareStatement(sql);
                    ResultSet rs = prest.executeQuery();
                    searchTable.setModel(DbUtils.resultSetToTableModel(rs));

                    conn.close();
                }
                catch (Exception e)
                {
                    e.printStackTrace();
                }
            }
            else if(usefulQueryComboBox.getSelectedItem().equals("Animals born in Dublin Zoo in the last 5 years"))
            {
                     try {
                    Class.forName(driver).newInstance();
                    Connection conn = DriverManager.getConnection(url + dbName, userName, password);
                    System.out.println("Database Connection Successful");


                    String sql= "SELECT * FROM ANIMAL " +
                                "WHERE BIRTH_LOCATION = 'Dublin Zoo' " +
                                "AND BIRTHDATE " +
                                "BETWEEN CURDATE() - INTERVAL 5 YEAR AND CURDATE() " +
                                "ORDER BY BIRTHDATE DESC";


                    prest = conn.prepareStatement(sql);
                    ResultSet rs = prest.executeQuery();
                    searchTable.setModel(DbUtils.resultSetToTableModel(rs));

                    conn.close();
                }
                catch (Exception e)
                {
                    e.printStackTrace();
                }
            }
            else if(usefulQueryComboBox.getSelectedItem().equals("Headcount for Each Manager"))
            {
                     try {
                    Class.forName(driver).newInstance();
                    Connection conn = DriverManager.getConnection(url + dbName, userName, password);
                    System.out.println("Database Connection Successful");


                    String sql= "SELECT 'Manager', FIRST_NAME, LAST_NAME, 'Manages', " +
                                "COUNT(LAST) AS 'Number', 'Employees' " +
                                "FROM STAFF_REPORTS_TO_VIEW " +
                                "GROUP BY FIRST_NAME, LAST_NAME " +
                                "ORDER BY FIRST_NAME ASC";


                    prest = conn.prepareStatement(sql);
                    ResultSet rs = prest.executeQuery();
                    searchTable.setModel(DbUtils.resultSetToTableModel(rs));

                    conn.close();
                }
                catch (Exception e)
                {
                    e.printStackTrace();
                }
            }
            else if(usefulQueryComboBox.getSelectedItem().equals("List of Which Employees Report to which Managers"))
            {
                     try {
                    Class.forName(driver).newInstance();
                    Connection conn = DriverManager.getConnection(url + dbName, userName, password);
                    System.out.println("Database Connection Successful");


                    String sql= "SELECT 'Employee', S2.FIRST_NAME AS FIRST, S2.LAST_NAME AS LAST, S2.TITLE AS ROLE, " +
                                "'Reports To', S1.FIRST_NAME, S1.LAST_NAME, S1.TITLE AS MANAGER " +
                                "FROM STAFF AS S1 " +
                                "INNER JOIN STAFF AS S2 " +
                                "ON S1.STAFF_ID = S2.REPORTS_TO";


                    prest = conn.prepareStatement(sql);
                    ResultSet rs = prest.executeQuery();
                    searchTable.setModel(DbUtils.resultSetToTableModel(rs));

                    conn.close();
                }
                catch (Exception e)
                {
                    e.printStackTrace();
                }
            }
            else if(usefulQueryComboBox.getSelectedItem().equals("Average weight of each Animal Species"))
            {
                     try {
                    Class.forName(driver).newInstance();
                    Connection conn = DriverManager.getConnection(url + dbName, userName, password);
                    System.out.println("Database Connection Successful");


                    String sql= "SELECT COMMON_NAME, TRUNCATE(AVG(WEIGHT_KG), 2) AS 'Ave Animal Weight' " +
                                "FROM ANIMAL " +
                                "GROUP BY COMMON_NAME " +
                                "ORDER BY WEIGHT_KG DESC";


                    prest = conn.prepareStatement(sql);
                    ResultSet rs = prest.executeQuery();
                    searchTable.setModel(DbUtils.resultSetToTableModel(rs));

                    conn.close();
                }
                catch (Exception e)
                {
                    e.printStackTrace();
                }
            }
        }
    }//GEN-LAST:event_getResultsButtonActionPerformed

    private void searchByTitleTextMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchByTitleTextMouseClicked
          // Manipulates various textfields depnding on which other fileds are active
          searchByIDcriteriaText.setEditable(false);
          searchByTitleText.setEditable(true);
          searchByIDcriteriaText.setText("");
          searchByCriteriaText.setEditable(false);
          searchByCriteriaText.setText(""); 
          updateTableButton.setEnabled(false);
          deleteButton.setEnabled(false);
    }//GEN-LAST:event_searchByTitleTextMouseClicked

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new searchUpdateDeleteFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backToMenuButton;
    private javax.swing.JLabel backgroundImageLabel;
    private javax.swing.JLabel chooseATableToQueryLabel;
    public javax.swing.JComboBox chooseTableComboBox;
    public javax.swing.JButton deleteButton;
    private javax.swing.JButton getResultsButton;
    private javax.swing.JButton logOutButton;
    private javax.swing.JLabel orLabel;
    private javax.swing.JLabel orLabel1;
    private javax.swing.JButton searchButton;
    private javax.swing.JLabel searchByCriteriaLabel;
    private javax.swing.JTextField searchByCriteriaText;
    private javax.swing.JLabel searchByIDLabel;
    private javax.swing.JTextField searchByIDcriteriaText;
    private javax.swing.JLabel searchByTitleLabel;
    private javax.swing.JTextField searchByTitleText;
    public javax.swing.JLabel searchResultsHeadingLabel;
    private javax.swing.JPanel searchSectionPanel;
    private javax.swing.JTable searchTable;
    private javax.swing.JScrollPane searchTableScrollPane;
    public javax.swing.JButton updateTableButton;
    private javax.swing.JComboBox usefulQueryComboBox;
    private javax.swing.JLabel usefulQueryLabel;
    // End of variables declaration//GEN-END:variables
}