/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * newAnimalEntryFrame.java
 *
 * Created on 08-Mar-2014, 20:32:14
 */

package my.zooProjectPackage;
import my.animalLibraryPackage.Animal;
import java.sql.*;
import javax.swing.JOptionPane;
/**
 *
 * @author Will Hogan
 */
public class newAnimalEntryFrame extends javax.swing.JFrame {

    // Declaration of the prest variable used throughout this frame.
    private PreparedStatement prest;

    // declaration of the Animal object ani used throughout this frame.
    Animal ani = new Animal();

    // Variables associated with the Year/Month/Day comboBoxes
    private String Ayear="####";
    private String Amonth="##";
    private String Aday="##";
    private String DOB=Ayear+"-"+Amonth+"-"+Aday;

    /** Creates new form newAnimalEntryFrame */
    public newAnimalEntryFrame() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        newAnimalEntryPanel = new javax.swing.JPanel();
        commonNameLabel = new javax.swing.JLabel();
        nickaNameLabel = new javax.swing.JLabel();
        genderLabel = new javax.swing.JLabel();
        Age = new javax.swing.JLabel();
        birthDateLabel = new javax.swing.JLabel();
        birthLocationLabel = new javax.swing.JLabel();
        countryOfOriginLabel = new javax.swing.JLabel();
        weightKGLabel = new javax.swing.JLabel();
        heightLabel = new javax.swing.JLabel();
        lengthLabel = new javax.swing.JLabel();
        nickNameText = new javax.swing.JTextField();
        genderComboBox = new javax.swing.JComboBox();
        birthLocationText = new javax.swing.JTextField();
        countryOfOriginText = new javax.swing.JTextField();
        weightKGText = new javax.swing.JTextField();
        heightText = new javax.swing.JTextField();
        lengthText = new javax.swing.JTextField();
        statusCodeLabel = new javax.swing.JLabel();
        habitatCodeLabel = new javax.swing.JLabel();
        statusCodeComboBox = new javax.swing.JComboBox();
        habitatCodeComboxbox = new javax.swing.JComboBox();
        getStatusButton = new javax.swing.JButton();
        getHabitatButton = new javax.swing.JButton();
        statusNameText = new javax.swing.JTextField();
        habitatNameText = new javax.swing.JTextField();
        notBornInDublinZooButton = new javax.swing.JButton();
        ageComboBox = new javax.swing.JComboBox();
        commonNameComboBox = new javax.swing.JComboBox();
        yearLabel = new javax.swing.JLabel();
        hyphen1Label = new javax.swing.JLabel();
        monthLabel = new javax.swing.JLabel();
        hyphen2Label = new javax.swing.JLabel();
        dayLabel = new javax.swing.JLabel();
        monthComboBox = new javax.swing.JComboBox();
        dayComboBox = new javax.swing.JComboBox();
        yearComboBox = new javax.swing.JComboBox();
        newCommonNameLabel = new javax.swing.JLabel();
        newCommonNameText = new javax.swing.JTextField();
        dateReturnValueText = new javax.swing.JTextField();
        stepsCompletedPanel = new javax.swing.JPanel();
        stepsCompleted2Image = new javax.swing.JLabel();
        stepsCompleted2Label = new javax.swing.JLabel();
        stepsCompleted1Label = new javax.swing.JLabel();
        stepsCompleted1Image = new javax.swing.JLabel();
        step1Label = new javax.swing.JLabel();
        step2Label = new javax.swing.JLabel();
        addCreateNewTaxonomy = new javax.swing.JPanel();
        taxonomyCodeLabel = new javax.swing.JLabel();
        taxonomyCodeComboBox = new javax.swing.JComboBox();
        getTaxonomyButton = new javax.swing.JButton();
        createNewTaxonomyButton = new javax.swing.JButton();
        speciesLabel = new javax.swing.JLabel();
        familyLabel = new javax.swing.JLabel();
        orderLabel = new javax.swing.JLabel();
        classLabel = new javax.swing.JLabel();
        phylumLabel = new javax.swing.JLabel();
        kingdomLabel = new javax.swing.JLabel();
        kingdomTaxonomyText = new javax.swing.JTextField();
        phylumTaxonomyText = new javax.swing.JTextField();
        classTaxonomyText = new javax.swing.JTextField();
        orderTaxonomyText = new javax.swing.JTextField();
        familyTaxonomyText = new javax.swing.JTextField();
        speciesTaxonomyText = new javax.swing.JTextField();
        createAnimalButton = new javax.swing.JButton();
        foodRequirementsPanel = new javax.swing.JPanel();
        newAimalIDLabel = new javax.swing.JLabel();
        foodIDLabel = new javax.swing.JLabel();
        dailyFeedsLabel = new javax.swing.JLabel();
        newAnimalIDText = new javax.swing.JTextField();
        foodIDComboBox = new javax.swing.JComboBox();
        dailyFeedsComboBox = new javax.swing.JComboBox();
        foodNameButton = new javax.swing.JButton();
        foodNameText = new javax.swing.JTextField();
        createDietButton = new javax.swing.JButton();
        summaryButton = new javax.swing.JButton();
        mainMenuButton = new javax.swing.JButton();
        logOutButton = new javax.swing.JButton();
        backgroundImageLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("New Animal Entry Frame");
        setMinimumSize(new java.awt.Dimension(1063, 725));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(null);

        newAnimalEntryPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "New Animal Entry", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14), new java.awt.Color(0, 153, 255))); // NOI18N
        newAnimalEntryPanel.setOpaque(false);

        commonNameLabel.setForeground(new java.awt.Color(255, 255, 255));
        commonNameLabel.setText("Common Name:");

        nickaNameLabel.setForeground(new java.awt.Color(255, 255, 255));
        nickaNameLabel.setText("Nickname:");

        genderLabel.setForeground(new java.awt.Color(255, 255, 255));
        genderLabel.setText("Gender:");

        Age.setForeground(new java.awt.Color(255, 255, 255));
        Age.setText("Age:");

        birthDateLabel.setText("Birthdate:");

        birthLocationLabel.setText("Birth Location:");

        countryOfOriginLabel.setText("Country Of Origin:");

        weightKGLabel.setText("Weight in KG:");

        heightLabel.setText("Height in FT:");

        lengthLabel.setText("Length in FT:");

        genderComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Male", "Female" }));
        genderComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genderComboBoxActionPerformed(evt);
            }
        });

        birthLocationText.setText("Dublin Zoo");

        statusCodeLabel.setText("Status Code:");

        habitatCodeLabel.setText("Habitat Code:");

        getStatusButton.setText("Get Status>");
        getStatusButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getStatusButtonActionPerformed(evt);
            }
        });

        getHabitatButton.setText("Get Habitat>");
        getHabitatButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getHabitatButtonActionPerformed(evt);
            }
        });

        notBornInDublinZooButton.setText("Not Born in Dublin Zoo");
        notBornInDublinZooButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                notBornInDublinZooButtonActionPerformed(evt);
            }
        });

        ageComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] {}));

        commonNameComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Please Select..." }));
        commonNameComboBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                commonNameComboBoxMouseClicked(evt);
            }
        });

        yearLabel.setText("YYYY");

        hyphen1Label.setText("-");

        monthLabel.setText("MM");

        hyphen2Label.setText("-");

        dayLabel.setText("DD");

        monthComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "##", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12" }));
        monthComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                monthComboBoxItemStateChanged(evt);
            }
        });
        monthComboBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                monthComboBoxFocusLost(evt);
            }
        });

        dayComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "##" }));
        dayComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                dayComboBoxItemStateChanged(evt);
            }
        });
        dayComboBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                dayComboBoxFocusLost(evt);
            }
        });

        yearComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "####", "1914", "1915", "1916", "1917", "1918", "1919", "1920", "1921", "1922", "1923", "1924", "1925", "1926", "1927", "1928", "1929", "1930", "1931", "1932", "1933", "1934", "1935", "1936", "1937", "1938", "1939", "1940", "1941", "1942", "1943", "1944", "1945", "1946", "1947", "1948", "1949", "1950", "1951", "1952", "1953", "1954", "1955", "1956", "1957", "1958", "1959", "1960", "1961", "1962", "1963", "1964", "1965", "1966", "1967", "1968", "1969", "1970", "1971", "1972", "1973", "1974", "1975", "1976", "1977", "1978", "1979", "1980", "1981", "1982", "1983", "1984", "1985", "1986", "1987", "1988", "1989", "1990", "1991", "1992", "1993", "1994", "1995", "1996", "1997", "1998", "1998", "1999", "2000", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014" }));
        yearComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                yearComboBoxItemStateChanged(evt);
            }
        });
        yearComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yearComboBoxActionPerformed(evt);
            }
        });

        newCommonNameLabel.setForeground(new java.awt.Color(255, 255, 255));
        newCommonNameLabel.setText("New:");

        newCommonNameText.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                newCommonNameTextMouseClicked(evt);
            }
        });

        stepsCompletedPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Steps", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14), new java.awt.Color(51, 153, 255))); // NOI18N
        stepsCompletedPanel.setOpaque(false);

        stepsCompleted2Image.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/greenTickImage(PNG).png"))); // NOI18N

        stepsCompleted2Label.setText("Step 2:");

        stepsCompleted1Label.setText("Step 1:");

        stepsCompleted1Image.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/greenTickImage(PNG).png"))); // NOI18N

        javax.swing.GroupLayout stepsCompletedPanelLayout = new javax.swing.GroupLayout(stepsCompletedPanel);
        stepsCompletedPanel.setLayout(stepsCompletedPanelLayout);
        stepsCompletedPanelLayout.setHorizontalGroup(
            stepsCompletedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(stepsCompletedPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(stepsCompletedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(stepsCompletedPanelLayout.createSequentialGroup()
                        .addComponent(stepsCompleted1Label)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(stepsCompleted1Image))
                    .addGroup(stepsCompletedPanelLayout.createSequentialGroup()
                        .addComponent(stepsCompleted2Label)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(stepsCompleted2Image)))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        stepsCompletedPanelLayout.setVerticalGroup(
            stepsCompletedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(stepsCompletedPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(stepsCompletedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(stepsCompleted1Label)
                    .addComponent(stepsCompleted1Image))
                .addGap(11, 11, 11)
                .addGroup(stepsCompletedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(stepsCompleted2Label)
                    .addComponent(stepsCompleted2Image))
                .addGap(30, 30, 30))
        );

        javax.swing.GroupLayout newAnimalEntryPanelLayout = new javax.swing.GroupLayout(newAnimalEntryPanel);
        newAnimalEntryPanel.setLayout(newAnimalEntryPanelLayout);
        newAnimalEntryPanelLayout.setHorizontalGroup(
            newAnimalEntryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(newAnimalEntryPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(newAnimalEntryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(newAnimalEntryPanelLayout.createSequentialGroup()
                        .addComponent(Age)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ageComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(newAnimalEntryPanelLayout.createSequentialGroup()
                        .addComponent(genderLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(genderComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(newAnimalEntryPanelLayout.createSequentialGroup()
                        .addGroup(newAnimalEntryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(newAnimalEntryPanelLayout.createSequentialGroup()
                                .addGroup(newAnimalEntryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, newAnimalEntryPanelLayout.createSequentialGroup()
                                        .addComponent(commonNameLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(commonNameComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, newAnimalEntryPanelLayout.createSequentialGroup()
                                        .addComponent(nickaNameLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(nickNameText, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(newCommonNameLabel))
                            .addGroup(newAnimalEntryPanelLayout.createSequentialGroup()
                                .addComponent(birthDateLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(newAnimalEntryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(yearLabel)
                                    .addGroup(newAnimalEntryPanelLayout.createSequentialGroup()
                                        .addComponent(yearComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(hyphen1Label)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(newAnimalEntryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(monthComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(monthLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(hyphen2Label)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(newAnimalEntryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(dayLabel)
                                    .addComponent(dayComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(newAnimalEntryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dateReturnValueText, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(newCommonNameText, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(newAnimalEntryPanelLayout.createSequentialGroup()
                        .addComponent(birthLocationLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(birthLocationText, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(notBornInDublinZooButton))
                    .addGroup(newAnimalEntryPanelLayout.createSequentialGroup()
                        .addGroup(newAnimalEntryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(newAnimalEntryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, newAnimalEntryPanelLayout.createSequentialGroup()
                                    .addComponent(habitatCodeLabel)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(habitatCodeComboxbox, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(getHabitatButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, newAnimalEntryPanelLayout.createSequentialGroup()
                                    .addComponent(heightLabel)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(heightText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, newAnimalEntryPanelLayout.createSequentialGroup()
                                    .addComponent(statusCodeLabel)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(statusCodeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(getStatusButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, newAnimalEntryPanelLayout.createSequentialGroup()
                                    .addComponent(lengthLabel)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(lengthText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                            .addGroup(newAnimalEntryPanelLayout.createSequentialGroup()
                                .addComponent(weightKGLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(weightKGText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(newAnimalEntryPanelLayout.createSequentialGroup()
                                .addComponent(countryOfOriginLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(countryOfOriginText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(newAnimalEntryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(newAnimalEntryPanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                                .addComponent(stepsCompletedPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30))
                            .addGroup(newAnimalEntryPanelLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(newAnimalEntryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(habitatNameText, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(statusNameText, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addGap(59, 59, 59))
        );

        newAnimalEntryPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {Age, birthDateLabel, birthLocationLabel, commonNameLabel, countryOfOriginLabel, genderLabel, habitatCodeLabel, heightLabel, lengthLabel, nickaNameLabel, statusCodeLabel, weightKGLabel});

        newAnimalEntryPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {countryOfOriginText, heightText, lengthText, nickNameText, weightKGText});

        newAnimalEntryPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {getHabitatButton, getStatusButton});

        newAnimalEntryPanelLayout.setVerticalGroup(
            newAnimalEntryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(newAnimalEntryPanelLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(newAnimalEntryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(commonNameLabel)
                    .addComponent(commonNameComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(newCommonNameLabel)
                    .addComponent(newCommonNameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(newAnimalEntryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nickaNameLabel)
                    .addComponent(nickNameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(newAnimalEntryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(genderLabel)
                    .addComponent(genderComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(newAnimalEntryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Age)
                    .addComponent(ageComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(newAnimalEntryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(yearLabel)
                    .addComponent(monthLabel)
                    .addComponent(dayLabel))
                .addGap(1, 1, 1)
                .addGroup(newAnimalEntryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(birthDateLabel)
                    .addComponent(yearComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hyphen1Label)
                    .addComponent(monthComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hyphen2Label)
                    .addComponent(dayComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dateReturnValueText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(newAnimalEntryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(newAnimalEntryPanelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(newAnimalEntryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(birthLocationText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(birthLocationLabel)
                            .addComponent(notBornInDublinZooButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(22, 22, 22)
                        .addGroup(newAnimalEntryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(countryOfOriginLabel)
                            .addComponent(countryOfOriginText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(newAnimalEntryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(weightKGLabel)
                            .addComponent(weightKGText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(newAnimalEntryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(heightLabel)
                            .addComponent(heightText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(newAnimalEntryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lengthText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lengthLabel))
                        .addGap(9, 9, 9))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, newAnimalEntryPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(stepsCompletedPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25)))
                .addGroup(newAnimalEntryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statusCodeLabel)
                    .addComponent(statusCodeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(getStatusButton)
                    .addComponent(statusNameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(newAnimalEntryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(habitatCodeLabel)
                    .addGroup(newAnimalEntryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(habitatCodeComboxbox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(getHabitatButton)
                        .addComponent(habitatNameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(68, Short.MAX_VALUE))
        );

        getContentPane().add(newAnimalEntryPanel);
        newAnimalEntryPanel.setBounds(20, 40, 530, 540);

        step1Label.setFont(new java.awt.Font("Tahoma", 1, 12));
        step1Label.setForeground(new java.awt.Color(255, 255, 255));
        step1Label.setText("Step 1:");
        getContentPane().add(step1Label);
        step1Label.setBounds(30, 20, 50, 15);

        step2Label.setFont(new java.awt.Font("Tahoma", 1, 12));
        step2Label.setText("Step 2:");
        getContentPane().add(step2Label);
        step2Label.setBounds(570, 340, 60, 15);

        addCreateNewTaxonomy.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "New Animal Entry", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 16), new java.awt.Color(0, 153, 255))); // NOI18N
        addCreateNewTaxonomy.setOpaque(false);

        taxonomyCodeLabel.setForeground(new java.awt.Color(255, 255, 255));
        taxonomyCodeLabel.setText("Code");

        getTaxonomyButton.setText("Get Taxonomy");
        getTaxonomyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getTaxonomyButtonActionPerformed(evt);
            }
        });

        createNewTaxonomyButton.setText("Create New Taxonomy");
        createNewTaxonomyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createNewTaxonomyButtonActionPerformed(evt);
            }
        });

        speciesLabel.setForeground(new java.awt.Color(255, 255, 255));
        speciesLabel.setText("Species:");

        familyLabel.setForeground(new java.awt.Color(255, 255, 255));
        familyLabel.setText("Family:");

        orderLabel.setForeground(new java.awt.Color(255, 255, 255));
        orderLabel.setText("Order:");

        classLabel.setForeground(new java.awt.Color(255, 255, 255));
        classLabel.setText("Class:");

        phylumLabel.setForeground(new java.awt.Color(255, 255, 255));
        phylumLabel.setText("Phylum:");

        kingdomLabel.setForeground(new java.awt.Color(255, 255, 255));
        kingdomLabel.setText("Kingdom:");

        createAnimalButton.setText("Create Animal");
        createAnimalButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createAnimalButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout addCreateNewTaxonomyLayout = new javax.swing.GroupLayout(addCreateNewTaxonomy);
        addCreateNewTaxonomy.setLayout(addCreateNewTaxonomyLayout);
        addCreateNewTaxonomyLayout.setHorizontalGroup(
            addCreateNewTaxonomyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addCreateNewTaxonomyLayout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(taxonomyCodeLabel)
                .addGap(23, 23, 23)
                .addGroup(addCreateNewTaxonomyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addCreateNewTaxonomyLayout.createSequentialGroup()
                        .addComponent(taxonomyCodeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(getTaxonomyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(createNewTaxonomyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(addCreateNewTaxonomyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, addCreateNewTaxonomyLayout.createSequentialGroup()
                            .addComponent(phylumLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(phylumTaxonomyText))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, addCreateNewTaxonomyLayout.createSequentialGroup()
                            .addComponent(kingdomLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(addCreateNewTaxonomyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(createAnimalButton)
                                .addComponent(kingdomTaxonomyText, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(addCreateNewTaxonomyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, addCreateNewTaxonomyLayout.createSequentialGroup()
                            .addComponent(classLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(classTaxonomyText))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, addCreateNewTaxonomyLayout.createSequentialGroup()
                            .addComponent(orderLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(orderTaxonomyText))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, addCreateNewTaxonomyLayout.createSequentialGroup()
                            .addComponent(familyLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(familyTaxonomyText))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, addCreateNewTaxonomyLayout.createSequentialGroup()
                            .addComponent(speciesLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(speciesTaxonomyText, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(72, 72, 72))
        );

        addCreateNewTaxonomyLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {classLabel, familyLabel, kingdomLabel, orderLabel, phylumLabel, speciesLabel});

        addCreateNewTaxonomyLayout.setVerticalGroup(
            addCreateNewTaxonomyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addCreateNewTaxonomyLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addCreateNewTaxonomyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(taxonomyCodeLabel)
                    .addComponent(taxonomyCodeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(getTaxonomyButton)
                    .addComponent(createNewTaxonomyButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(addCreateNewTaxonomyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(speciesLabel)
                    .addComponent(speciesTaxonomyText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addCreateNewTaxonomyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(familyLabel)
                    .addComponent(familyTaxonomyText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addCreateNewTaxonomyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(orderLabel)
                    .addComponent(orderTaxonomyText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addCreateNewTaxonomyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(classLabel)
                    .addComponent(classTaxonomyText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(addCreateNewTaxonomyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(phylumLabel)
                    .addComponent(phylumTaxonomyText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addCreateNewTaxonomyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(kingdomLabel)
                    .addComponent(kingdomTaxonomyText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(createAnimalButton)
                .addGap(178, 178, 178))
        );

        getContentPane().add(addCreateNewTaxonomy);
        addCreateNewTaxonomy.setBounds(560, 40, 460, 290);

        foodRequirementsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "New Animal Entry", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14), new java.awt.Color(0, 153, 255))); // NOI18N
        foodRequirementsPanel.setOpaque(false);

        newAimalIDLabel.setText("New Animal ID:");

        foodIDLabel.setText("Food ID:");

        dailyFeedsLabel.setText("Daily Feeds:");

        foodIDComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21" }));

        dailyFeedsComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20" }));

        foodNameButton.setText("Food Name>");
        foodNameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                foodNameButtonActionPerformed(evt);
            }
        });

        createDietButton.setText("Create Diet");
        createDietButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createDietButtonActionPerformed(evt);
            }
        });

        summaryButton.setText("Summary");
        summaryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                summaryButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout foodRequirementsPanelLayout = new javax.swing.GroupLayout(foodRequirementsPanel);
        foodRequirementsPanel.setLayout(foodRequirementsPanelLayout);
        foodRequirementsPanelLayout.setHorizontalGroup(
            foodRequirementsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(foodRequirementsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(foodRequirementsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, foodRequirementsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(foodRequirementsPanelLayout.createSequentialGroup()
                            .addComponent(newAimalIDLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(newAnimalIDText))
                        .addGroup(foodRequirementsPanelLayout.createSequentialGroup()
                            .addComponent(dailyFeedsLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(dailyFeedsComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(foodRequirementsPanelLayout.createSequentialGroup()
                            .addComponent(foodIDLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(foodIDComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(createDietButton, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addGroup(foodRequirementsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(foodRequirementsPanelLayout.createSequentialGroup()
                        .addComponent(foodNameButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(foodNameText, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(summaryButton))
                .addContainerGap(87, Short.MAX_VALUE))
        );

        foodRequirementsPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {dailyFeedsLabel, foodIDLabel, newAimalIDLabel});

        foodRequirementsPanelLayout.setVerticalGroup(
            foodRequirementsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(foodRequirementsPanelLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(foodRequirementsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newAimalIDLabel)
                    .addComponent(newAnimalIDText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(foodRequirementsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(foodIDComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(foodIDLabel)
                    .addComponent(foodNameButton)
                    .addComponent(foodNameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(foodRequirementsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dailyFeedsLabel)
                    .addComponent(dailyFeedsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(foodRequirementsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(createDietButton)
                    .addComponent(summaryButton))
                .addContainerGap(36, Short.MAX_VALUE))
        );

        getContentPane().add(foodRequirementsPanel);
        foodRequirementsPanel.setBounds(560, 360, 460, 220);

        mainMenuButton.setText("Back to Menu");
        mainMenuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainMenuButtonActionPerformed(evt);
            }
        });
        getContentPane().add(mainMenuButton);
        mainMenuButton.setBounds(420, 590, 130, 23);

        logOutButton.setText("Log Out");
        logOutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logOutButtonActionPerformed(evt);
            }
        });
        getContentPane().add(logOutButton);
        logOutButton.setBounds(560, 590, 110, 23);

        backgroundImageLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/dublinZooOutsideImage(resized&edited2).jpg"))); // NOI18N
        getContentPane().add(backgroundImageLabel);
        backgroundImageLabel.setBounds(0, 0, 1080, 650);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-1092)/2, (screenSize.height-690)/2, 1092, 690);
    }// </editor-fold>//GEN-END:initComponents

    private void genderComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_genderComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_genderComboBoxActionPerformed

    private void createNewTaxonomyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createNewTaxonomyButtonActionPerformed
        newTaxonomyEntryFrame frame = new newTaxonomyEntryFrame();
        frame.setVisible(true);
    }//GEN-LAST:event_createNewTaxonomyButtonActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // On window launch, disables various fields
        newCommonNameText.setEnabled(false);
        dateReturnValueText.setEditable(false);
        birthLocationText.setEditable(false);
        newAnimalIDText.setEditable(false);
        stepsCompleted1Image.setVisible(false);
        stepsCompleted2Image.setVisible(false);

        // This part deals with the Variables associated with the Database Connection
        String url = "jdbc:mysql://127.0.0.1:3306/";
        String dbName = "zooProject";
        String driver = "com.mysql.jdbc.Driver";
        String userName = "root";
        String password = "nss2013";

        // This parts tries to execute the SQL statement and if it can't relays a message
        // The first section is connecting the various variables to the statement to be exectuted
        try {
            Class.forName(driver).newInstance();

            System.out.println("Connecting to the Database " + dbName + "....");
            Connection conn = DriverManager.getConnection(url + dbName, userName, password);
            System.out.println("Database Connection Successful");

                // Set up a create statement
              java.sql.Statement stmn = conn.createStatement();
              // Set Up SQL
              String sql = "SELECT * FROM ANIMAL GROUP BY COMMON_NAME";
              // Excute Query and send result set to rs
              ResultSet rs = stmn.executeQuery(sql);
            while (rs.next()) {
                // Retrieve by column name
                String COMMON_NAME = rs.getString("COMMON_NAME");
                commonNameComboBox.addItem(COMMON_NAME);
            }
            // Close the connection to the database
            conn.close();
        } catch (Exception e) {
            e.printStackTrace();
        }


           try {
            Class.forName(driver).newInstance();

            System.out.println("Connecting to the Database " + dbName + "....");
            Connection conn = DriverManager.getConnection(url + dbName, userName, password);
            System.out.println("Database Connection Successful");

            // Set up a create statement
            java.sql.Statement stmn = conn.createStatement();
            // Set Up SQL
            String sql = "SELECT * FROM IUCN_STATUS ORDER BY IUCN_CODE ASC";
            // Excute Query and send result set to rs
            ResultSet rs = stmn.executeQuery(sql);

            while (rs.next())
            {
                // Retrieve by column name
                String IUCN_CODE = rs.getString("IUCN_CODE");
                statusCodeComboBox.addItem(IUCN_CODE);
            }
            // Close the connection to the database
            conn.close();
        } catch (Exception e) {
            e.printStackTrace();
        }


        try {
            Class.forName(driver).newInstance();

            System.out.println("Connecting to the Database " + dbName + "....");
            Connection conn = DriverManager.getConnection(url + dbName, userName, password);
            System.out.println("Database Connection Successful");

                // Set up a create statement
              java.sql.Statement stmn = conn.createStatement();
              // Set Up SQL
              String sql = "SELECT * FROM TAXONOMY";
              // Excute Query and send result set to rs
              ResultSet rs = stmn.executeQuery(sql);
            while (rs.next()) {
                // Retrieve by column name
                String TAXON_CODE = rs.getString("TAXON_CODE");
                taxonomyCodeComboBox.addItem(TAXON_CODE);
            }
            // Close the connection to the database
            conn.close();
        } catch (Exception e) {
            e.printStackTrace();
        }



         try {
            Class.forName(driver).newInstance();

            System.out.println("Connecting to the Database " + dbName + "....");
            Connection conn = DriverManager.getConnection(url + dbName, userName, password);
            System.out.println("Database Connection Successful");

                // Set up a create statement
              java.sql.Statement stmn = conn.createStatement();
              // Set Up SQL
              String sql = "SELECT * FROM ZOO_HABITAT";
              // Excute Query and send result set to rs
              ResultSet rs = stmn.executeQuery(sql);
            while (rs.next()) {
                // Retrieve by column name
                String HABITAT_ID = rs.getString("HABITAT_ID");
                habitatCodeComboxbox.addItem(HABITAT_ID);
            }
            // Close the connection to the database
            conn.close();
        } catch (Exception e) {
            e.printStackTrace();
        }

    }//GEN-LAST:event_formWindowOpened

    private void getStatusButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getStatusButtonActionPerformed
        // This part deals with the Variables associated with the Database Connection
        String url = "jdbc:mysql://127.0.0.1:3306/";
        String dbName = "zooProject";
        String driver = "com.mysql.jdbc.Driver";
        String userName = "root";
        String password = "nss2013";

        // This parts tries to execute the SQL statement and if it can't relays a message
        // The first section is connecting the various variables to the statement to be exectuted
        try {
            Class.forName(driver).newInstance();
            Connection conn = DriverManager.getConnection(url + dbName, userName, password);
            System.out.println("Database Connection Successful");

            // Set up a create statement
            java.sql.Statement stmn = conn.createStatement();
            // Set Up SQL
            String sql = "SELECT * FROM IUCN_STATUS WHERE IUCN_CODE = " + statusCodeComboBox.getSelectedItem();
            // Excute Query and send result set to rs
            ResultSet rs = stmn.executeQuery(sql);
            while (rs.next()) {
                // Retrieve by column name
                String STATUS = rs.getString("STATUS");
                statusNameText.setText(STATUS);
            }
            // Close the connection to the database
            conn.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_getStatusButtonActionPerformed

    private void getHabitatButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getHabitatButtonActionPerformed
        // This part deals with the Variables associated with the Database Connection
        String url = "jdbc:mysql://127.0.0.1:3306/";
        String dbName = "zooProject";
        String driver = "com.mysql.jdbc.Driver";
        String userName = "root";
        String password = "nss2013";

        // This parts tries to execute the SQL statement and if it can't relays a message
        // The first section is connecting the various variables to the statement to be exectuted
        try {
            Class.forName(driver).newInstance();
            Connection conn = DriverManager.getConnection(url + dbName, userName, password);
            System.out.println("Database Connection Successful");

            // Set up a create statement
            java.sql.Statement stmn = conn.createStatement();
            // Set Up SQL
            String sql = "SELECT * FROM ZOO_HABITAT WHERE HABITAT_ID = " + habitatCodeComboxbox.getSelectedItem();
            // Excute Query and send result set to rs
            ResultSet rs = stmn.executeQuery(sql);
            while (rs.next()) {
                // Retrieve by column name
                String ZOO_HAB = rs.getString("ZOO_HAB");
                habitatNameText.setText(ZOO_HAB);
            }
            // Close the connection to the database
            conn.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_getHabitatButtonActionPerformed

    private void getTaxonomyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getTaxonomyButtonActionPerformed
        // This part deals with the Variables associated with the Database Connection
        String url = "jdbc:mysql://127.0.0.1:3306/";
        String dbName = "zooProject";
        String driver = "com.mysql.jdbc.Driver";
        String userName = "root";
        String password = "nss2013";

        // This parts tries to execute the SQL statement and if it can't relays a message
        // The first section is connecting the various variables to the statement to be exectuted
        try {
            Class.forName(driver).newInstance();
            Connection conn = DriverManager.getConnection(url + dbName, userName, password);
            System.out.println("Database Connection Successful");

            // Set up a create statement
            java.sql.Statement stmn = conn.createStatement();
            // Set Up SQL
            String sql = "SELECT * FROM TAXONOMY WHERE TAXON_CODE = " + taxonomyCodeComboBox.getSelectedItem();
            // Excute Query and send result set to rs
            ResultSet rs = stmn.executeQuery(sql);
            while (rs.next()) {
                // Retrieve by column name
                String SPECIES = rs.getString("SPECIES");
                String FAMILY = rs.getString("FAMILY");
                String ORDERING = rs.getString("ORDERING");
                String CLASS = rs.getString("CLASS");
                String PHYLUM = rs.getString("PHYLUM");
                String KINGDOM = rs.getString("KINGDOM");

                speciesTaxonomyText.setText(SPECIES);
                familyTaxonomyText.setText(FAMILY);
                orderTaxonomyText.setText(ORDERING);
                classTaxonomyText.setText(CLASS);
                phylumTaxonomyText.setText(PHYLUM);
                kingdomTaxonomyText.setText(KINGDOM);
            }
            // Close the connection to the database
            conn.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_getTaxonomyButtonActionPerformed

    private void newCommonNameTextMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_newCommonNameTextMouseClicked
        // Sets various fields to not-editable
        commonNameComboBox.setEnabled(false);
        newCommonNameText.setEnabled(true);
    }//GEN-LAST:event_newCommonNameTextMouseClicked

    public void createObject()
    {
        ani.setCommonName(commonNameComboBox.getSelectedItem().toString());
    }

    private void createAnimalButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createAnimalButtonActionPerformed

        /* This section deals with the Actual creation of the new Animal
         * the various getters & setters object association applies here. */
        if(commonNameComboBox.isEnabled()==true)
        {
            ani.setCommonName(commonNameComboBox.getSelectedItem().toString());
        }
        else if(newCommonNameText.isEnabled()==true)
        {
            ani.setCommonName(newCommonNameText.getText());
        }
    
        if (heightText.getText().equals(""))
        {
            ani.setHeight(0.0);
        }
        else
        {
            ani.setHeight(Double.parseDouble(heightText.getText().toString()));
        }

        if (lengthText.getText().equals(""))
        {
            ani.setLength(0.0);
        }
        else 
        {
            ani.setLength(Double.parseDouble(lengthText.getText().toString()));
        }

        if (lengthText.getText().equals("") && heightText.getText().equals(""))
        {
            JOptionPane.showMessageDialog(null, "Please Enter either a Weight OR Height");
        }
        else
        {
        ani.setNickName(nickNameText.getText());
        ani.setGender(genderComboBox.getSelectedItem().toString());
        ani.setAge(Integer.parseInt(ageComboBox.getSelectedItem().toString()));
        ani.setBirthdate(dateReturnValueText.getText());
        ani.setBirthLocation(birthLocationText.getText());
        ani.setCountryOfOrigin(countryOfOriginText.getText());
        ani.setWeight(Double.parseDouble(weightKGText.getText().toString()));
        ani.setIUCNCode(Integer.parseInt(statusCodeComboBox.getSelectedItem().toString()));
        ani.setIUCNStatus(statusNameText.getText());
        ani.setTaxonomyID(Integer.parseInt(taxonomyCodeComboBox.getSelectedItem().toString()));
        ani.setSpecies(speciesTaxonomyText.getText());
        ani.setFamily(familyTaxonomyText.getText());
        ani.setOrdering(orderTaxonomyText.getText());
        ani.setAnimalClass(classTaxonomyText.getText());
        ani.setPhylum(phylumTaxonomyText.getText());
        ani.setKingdom(kingdomTaxonomyText.getText());
        ani.setZooHabitatID(Integer.parseInt(habitatCodeComboxbox.getSelectedItem().toString()));
        ani.setZooHabitat(habitatNameText.getText());
        

        // This part deals with the Variables associated with the Database Connection
        String url = "jdbc:mysql://127.0.0.1:3306/";
        String dbName = "zooProject";
        String driver = "com.mysql.jdbc.Driver";
        String userName = "root";
        String password = "nss2013";

        // This parts tries to execute the SQL statement and if it can't relays a message
        // The first section is connecting the various variables to the statement to be exectuted
        try {
            Class.forName(driver).newInstance();

            System.out.println("Connecting to the Database " + dbName + "....");
            Connection conn = DriverManager.getConnection(url + dbName, userName, password);
            System.out.println("Database Connection Successful");

            String sql = "INSERT INTO ANIMAL(COMMON_NAME, NICKNAME, GENDER, AGE, BIRTHDATE, " +
                         "BIRTH_LOCATION, COUNTRY_OF_ORIGIN, WEIGHT_KG, HEIGHT_FT, LENGTH_FT, " +
                         "IUCN_CODE, TAXON_CODE, HABITAT_ID) " +
                         "VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
            // Set up a create statement
            prest = conn.prepareStatement(sql);
            // Set Up SQL
            prest.setString(1, ani.getCommonName());
            prest.setString(2, ani.getNickName());
            prest.setString(3, ani.getGender());
            prest.setInt(4, ani.getAge());
            prest.setString(5, ani.getBirthdate());
            prest.setString(6, ani.getBirthLocation());
            prest.setString(7, ani.getCountryOfOrigin());
            prest.setDouble(8, ani.getWeight());
            prest.setDouble(9, ani.getHeight());
            prest.setDouble(10, ani.getLength());  
            prest.setDouble(10, ani.getLength()); 
            prest.setInt(11, ani.getIUCNCode());
            prest.setInt(12, ani.getTaxonomyID());
            prest.setInt(13, ani.getZooHabitatID());

            // Executes the Insert
            prest.executeUpdate();

            // Displays a message.
            JOptionPane.showMessageDialog(this, "A new " +ani.getCommonName()+ " Called " +ani.getNickName()+ " has been added to the System\n" +
                                          "Please create a Diet for the new Animal");

            // Closes the Prepared Statement & connection variables.
            prest.close();
            conn.close();

        } catch (Exception e) {
            e.printStackTrace();
        }
        

        try {
            Class.forName(driver).newInstance();
            Connection conn = DriverManager.getConnection(url + dbName, userName, password);
            System.out.println("Database Connection Successful");

            // Set up a create statement
            java.sql.Statement stmn = conn.createStatement();
            // Set Up SQL
            String sql = "SELECT * FROM ANIMAL " +
                         "WHERE ANIMAL_ID = (SELECT MAX(ANIMAL_ID) FROM ANIMAL)";
            // Excute Query and send result set to rs
            ResultSet rs = stmn.executeQuery(sql);
            while (rs.next()) {
                // Retrieve by column name
                String ANIMAL_ID = rs.getString("ANIMAL_ID");
                newAnimalIDText.setText(ANIMAL_ID);
            }
            // Close the connection to the database
            conn.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        }

        stepsCompleted1Image.setVisible(true);

    }//GEN-LAST:event_createAnimalButtonActionPerformed

    private void commonNameComboBoxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_commonNameComboBoxMouseClicked
        // Toggles varibles between active & inactive.
        commonNameComboBox.setEnabled(true);
        newCommonNameText.setEnabled(false);
    }//GEN-LAST:event_commonNameComboBoxMouseClicked

    private void yearComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_yearComboBoxItemStateChanged
        // Retrieves values from the Year ComboBox
        Ayear = yearComboBox.getSelectedItem().toString();
        DOB=Ayear+"-"+Amonth+"-"+Aday;
        dateReturnValueText.setText(DOB);
    }//GEN-LAST:event_yearComboBoxItemStateChanged

    private void monthComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_monthComboBoxItemStateChanged
        // Retrieves values from the Month ComboBox
        Amonth = monthComboBox.getSelectedItem().toString();
        DOB=Ayear+"-"+Amonth+"-"+Aday;
        dateReturnValueText.setText(DOB);

        // This section deals with code relating to Months and days within those months.
        if (monthComboBox.getSelectedItem().equals("02"))
        {
            dayComboBox.removeAll();
            dayComboBox.addItem("##");
            for (int i = 1; i < 29; i++)
            {
                dayComboBox.addItem(i + "");
            }
            
        }
        else if (monthComboBox.getSelectedItem().equals("01") || monthComboBox.getSelectedItem().equals("03") ||  monthComboBox.getSelectedItem().equals("05") || monthComboBox.getSelectedItem().equals("07") || monthComboBox.getSelectedItem().equals("08") || monthComboBox.getSelectedItem().equals("10") || monthComboBox.getSelectedItem().equals("12"))
        {
            dayComboBox.removeAll();
            dayComboBox.addItem("##");
            for (int i = 1; i <= 31; i++)
            {
                dayComboBox.addItem(i + "");
            }
        }
        else if (monthComboBox.getSelectedItem().equals("04") || monthComboBox.getSelectedItem().equals("06") ||  monthComboBox.getSelectedItem().equals("09") || monthComboBox.getSelectedItem().equals("11"))
        {
            dayComboBox.removeAll();
            dayComboBox.addItem("##");
            for (int i = 1; i <= 30; i++)
            {
                dayComboBox.addItem(i + "");
            }
        }
    }//GEN-LAST:event_monthComboBoxItemStateChanged

    private void yearComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yearComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_yearComboBoxActionPerformed

    private void dayComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_dayComboBoxItemStateChanged
        // Retrieves values from the day ComboBox
        Aday = dayComboBox.getSelectedItem().toString();
        DOB=Ayear+"-"+Amonth+"-"+Aday;
        dateReturnValueText.setText(DOB);
    }//GEN-LAST:event_dayComboBoxItemStateChanged

    private void notBornInDublinZooButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_notBornInDublinZooButtonActionPerformed
        // launches the below frame when clicked.
        AnimalExternalHistoryFrame frame = new AnimalExternalHistoryFrame();
        frame.setVisible(true);
    }//GEN-LAST:event_notBornInDublinZooButtonActionPerformed

    private void foodNameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_foodNameButtonActionPerformed
        // This part deals with the Variables associated with the Database Connection
        String url = "jdbc:mysql://127.0.0.1:3306/";
        String dbName = "zooProject";
        String driver = "com.mysql.jdbc.Driver";
        String userName = "root";
        String password = "nss2013";

        // This parts tries to execute the SQL statement and if it can't relays a message
        // The first section is connecting the various variables to the statement to be exectuted
        try {
            Class.forName(driver).newInstance();
            Connection conn = DriverManager.getConnection(url + dbName, userName, password);
            System.out.println("Database Connection Successful");
            // Set up a create statement
            java.sql.Statement stmn = conn.createStatement();
            // Set Up SQL
            String sql = "SELECT * FROM FOOD_TABLE WHERE FOOD_ID = " + foodIDComboBox.getSelectedItem();
            // Excute Query and send result set to rs
            ResultSet rs = stmn.executeQuery(sql);
            while(rs.next()){
                // Retrieve by column name
                String FOOD_TYPE = rs.getString("FOOD_TYPE");
                foodNameText.setText(FOOD_TYPE);
            }
            // Close the connection to the database
            conn.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_foodNameButtonActionPerformed

    private void createDietButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createDietButtonActionPerformed
        // Various getters & setters object associated
        ani.setAnimalID(Integer.parseInt(newAnimalIDText.getText()));
        ani.setFoodID(Integer.parseInt(foodIDComboBox.getSelectedItem().toString()));
        ani.setFoodType(foodNameText.getText());
        ani.setDailyFeeds(Integer.parseInt(dailyFeedsComboBox.getSelectedItem().toString()));

        // This part deals with the Variables associated with the Database Connection
        String url = "jdbc:mysql://127.0.0.1:3306/";
        String dbName = "zooProject";
        String driver = "com.mysql.jdbc.Driver";
        String userName = "root";
        String password = "nss2013";

        // This parts tries to execute the SQL statement and if it can't relays a message
        // The first section is connecting the various variables to the statement to be exectuted
        try {
            Class.forName(driver).newInstance();

            System.out.println("Connecting to the Database " + dbName + "....");
            Connection conn = DriverManager.getConnection(url + dbName, userName, password);
            System.out.println("Database Connection Successful");

            String sql = "INSERT INTO ANIMAL_FOOD(ANIMAL_ID, FOOD_ID, DAILY_FEEDS)" +
                         "VALUES(?, ?, ?)";
            // Set up a create statement
            prest = conn.prepareStatement(sql);
            // Set Up SQL
            prest.setInt(1, ani.getAnimalID());
            prest.setInt(2, ani.getFoodID());
            prest.setInt(3, ani.getDailyFeeds());

            prest.executeUpdate();
            
            JOptionPane.showMessageDialog(null, "Animal diet creation Successful\n" +
                                          "Please click on the Summary button for a Full Review");

            createDietButton.setText("Add Another Food");

            // Close the connection to the database
            conn.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        stepsCompleted2Image.setVisible(true);
    }//GEN-LAST:event_createDietButtonActionPerformed

    private void summaryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_summaryButtonActionPerformed
        // When the full animal has been created, the below frame is a Screen print out review of everything entered.
        JOptionPane.showMessageDialog(null, "SUMMARY OF ANIMAL " + ani.getCommonName() + " CREATION:\n" + "New Animal ID: " + ani.getAnimalID() +
                                       "\nCommon Name: " + ani.getCommonName() + "\nNickname: " + ani.getNickName() +
                                       "\nGender: " + ani.getGender() + "\nAge: " + ani.getAge() + "\nDOB: " + ani.getBirthdate() +
                                       "\nBirth Location: " + ani.getBirthLocation() + "\nCountry Of Origin: " + ani.getCountryOfOrigin() +
                                       "\nWeight: " + ani.getWeight() + "Kg " + "\nHeight: " + ani.getHeight() + "Ft " +
                                       "\nLength: " + ani.getLength() + "Ft " + "\nZoo Habitat: " + ani.getZooHabitat() +
                                       "\nIUCN Status: " + ani.getIUCNStatus() + "\n" + "\nTAXONOMY\n" + "Species: " + ani.getSpecies() +
                                       "\nFamily: " + ani.getFamily() + "\nOrder: " + ani.getOrdering() + "\nClass:" + ani.getAnimalClass() +
                                       "\nPhylum: " + ani.getPhylum() + "\nKingdom: " + ani.getKingdom() + "\n" + "\nDIET\n" + "Foot Type: " + ani.getFoodType() +
                                       "\nDaily Feeds: " + ani.getDailyFeeds());

        // Returns the Manager to the Main Menu
        managersOptionsFrame frame = new managersOptionsFrame();
        frame.setVisible(true);
        setVisible(false);
    }//GEN-LAST:event_summaryButtonActionPerformed

    private void mainMenuButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainMenuButtonActionPerformed
        // Returns the Manager to the Main Menu
        managersOptionsFrame frame =  new managersOptionsFrame();
        frame.setVisible(true);
        setVisible(false);
    }//GEN-LAST:event_mainMenuButtonActionPerformed

    private void logOutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logOutButtonActionPerformed
         // When this button is clicked a New Frame Object called Frame is created & the User
        // is returned to the Main login Frame.
        loginFrame frame = new loginFrame();
        frame.setVisible(true);
        setVisible(false);
    }//GEN-LAST:event_logOutButtonActionPerformed

    private void dayComboBoxFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_dayComboBoxFocusLost
       
    }//GEN-LAST:event_dayComboBoxFocusLost

    private void monthComboBoxFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_monthComboBoxFocusLost

    }//GEN-LAST:event_monthComboBoxFocusLost

    /*
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new newAnimalEntryFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Age;
    private javax.swing.JPanel addCreateNewTaxonomy;
    private javax.swing.JComboBox ageComboBox;
    private javax.swing.JLabel backgroundImageLabel;
    private javax.swing.JLabel birthDateLabel;
    private javax.swing.JLabel birthLocationLabel;
    public static javax.swing.JTextField birthLocationText;
    private javax.swing.JLabel classLabel;
    public static javax.swing.JTextField classTaxonomyText;
    private javax.swing.JComboBox commonNameComboBox;
    private javax.swing.JLabel commonNameLabel;
    private javax.swing.JLabel countryOfOriginLabel;
    private javax.swing.JTextField countryOfOriginText;
    public static javax.swing.JButton createAnimalButton;
    private javax.swing.JButton createDietButton;
    private javax.swing.JButton createNewTaxonomyButton;
    private javax.swing.JComboBox dailyFeedsComboBox;
    private javax.swing.JLabel dailyFeedsLabel;
    private javax.swing.JTextField dateReturnValueText;
    private javax.swing.JComboBox dayComboBox;
    private javax.swing.JLabel dayLabel;
    private javax.swing.JLabel familyLabel;
    public static javax.swing.JTextField familyTaxonomyText;
    private javax.swing.JComboBox foodIDComboBox;
    private javax.swing.JLabel foodIDLabel;
    private javax.swing.JButton foodNameButton;
    private javax.swing.JTextField foodNameText;
    private javax.swing.JPanel foodRequirementsPanel;
    private javax.swing.JComboBox genderComboBox;
    private javax.swing.JLabel genderLabel;
    private javax.swing.JButton getHabitatButton;
    private javax.swing.JButton getStatusButton;
    private javax.swing.JButton getTaxonomyButton;
    private javax.swing.JComboBox habitatCodeComboxbox;
    private javax.swing.JLabel habitatCodeLabel;
    private javax.swing.JTextField habitatNameText;
    private javax.swing.JLabel heightLabel;
    private javax.swing.JTextField heightText;
    private javax.swing.JLabel hyphen1Label;
    private javax.swing.JLabel hyphen2Label;
    private javax.swing.JLabel kingdomLabel;
    public static javax.swing.JTextField kingdomTaxonomyText;
    private javax.swing.JLabel lengthLabel;
    private javax.swing.JTextField lengthText;
    private javax.swing.JButton logOutButton;
    private javax.swing.JButton mainMenuButton;
    private javax.swing.JComboBox monthComboBox;
    private javax.swing.JLabel monthLabel;
    private javax.swing.JLabel newAimalIDLabel;
    private javax.swing.JPanel newAnimalEntryPanel;
    private javax.swing.JTextField newAnimalIDText;
    private javax.swing.JLabel newCommonNameLabel;
    private javax.swing.JTextField newCommonNameText;
    private javax.swing.JTextField nickNameText;
    private javax.swing.JLabel nickaNameLabel;
    private javax.swing.JButton notBornInDublinZooButton;
    private javax.swing.JLabel orderLabel;
    public static javax.swing.JTextField orderTaxonomyText;
    private javax.swing.JLabel phylumLabel;
    public static javax.swing.JTextField phylumTaxonomyText;
    private javax.swing.JLabel speciesLabel;
    public static javax.swing.JTextField speciesTaxonomyText;
    private javax.swing.JComboBox statusCodeComboBox;
    private javax.swing.JLabel statusCodeLabel;
    private javax.swing.JTextField statusNameText;
    private javax.swing.JLabel step1Label;
    private javax.swing.JLabel step2Label;
    private javax.swing.JLabel stepsCompleted1Image;
    private javax.swing.JLabel stepsCompleted1Label;
    private javax.swing.JLabel stepsCompleted2Image;
    private javax.swing.JLabel stepsCompleted2Label;
    private javax.swing.JPanel stepsCompletedPanel;
    public static javax.swing.JButton summaryButton;
    public static javax.swing.JComboBox taxonomyCodeComboBox;
    private javax.swing.JLabel taxonomyCodeLabel;
    private javax.swing.JLabel weightKGLabel;
    private javax.swing.JTextField weightKGText;
    private javax.swing.JComboBox yearComboBox;
    private javax.swing.JLabel yearLabel;
    // End of variables declaration//GEN-END:variables

}